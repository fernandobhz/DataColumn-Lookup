'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tablefaturamento_instrucao As faturamento_instrucaoDataTable
    
    Private tableinstrucao As instrucaoDataTable
    
    Private tablefaturamento As faturamentoDataTable
    
    Private relationFK_faturamento_instrucao_instrucao As Global.System.Data.DataRelation
    
    Private relationFK_faturamento_instrucao_faturamento As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                Me.InitExpressions
            End If
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("faturamento_instrucao")) Is Nothing) Then
                MyBase.Tables.Add(New faturamento_instrucaoDataTable(ds.Tables("faturamento_instrucao")))
            End If
            If (Not (ds.Tables("instrucao")) Is Nothing) Then
                MyBase.Tables.Add(New instrucaoDataTable(ds.Tables("instrucao")))
            End If
            If (Not (ds.Tables("faturamento")) Is Nothing) Then
                MyBase.Tables.Add(New faturamentoDataTable(ds.Tables("faturamento")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property faturamento_instrucao() As faturamento_instrucaoDataTable
        Get
            Return Me.tablefaturamento_instrucao
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property instrucao() As instrucaoDataTable
        Get
            Return Me.tableinstrucao
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property faturamento() As faturamentoDataTable
        Get
            Return Me.tablefaturamento
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("faturamento_instrucao")) Is Nothing) Then
                MyBase.Tables.Add(New faturamento_instrucaoDataTable(ds.Tables("faturamento_instrucao")))
            End If
            If (Not (ds.Tables("instrucao")) Is Nothing) Then
                MyBase.Tables.Add(New instrucaoDataTable(ds.Tables("instrucao")))
            End If
            If (Not (ds.Tables("faturamento")) Is Nothing) Then
                MyBase.Tables.Add(New faturamentoDataTable(ds.Tables("faturamento")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablefaturamento_instrucao = CType(MyBase.Tables("faturamento_instrucao"),faturamento_instrucaoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablefaturamento_instrucao) Is Nothing) Then
                Me.tablefaturamento_instrucao.InitVars
            End If
        End If
        Me.tableinstrucao = CType(MyBase.Tables("instrucao"),instrucaoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinstrucao) Is Nothing) Then
                Me.tableinstrucao.InitVars
            End If
        End If
        Me.tablefaturamento = CType(MyBase.Tables("faturamento"),faturamentoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablefaturamento) Is Nothing) Then
                Me.tablefaturamento.InitVars
            End If
        End If
        Me.relationFK_faturamento_instrucao_instrucao = Me.Relations("FK_faturamento_instrucao_instrucao")
        Me.relationFK_faturamento_instrucao_faturamento = Me.Relations("FK_faturamento_instrucao_faturamento")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablefaturamento_instrucao = New faturamento_instrucaoDataTable(false)
        MyBase.Tables.Add(Me.tablefaturamento_instrucao)
        Me.tableinstrucao = New instrucaoDataTable
        MyBase.Tables.Add(Me.tableinstrucao)
        Me.tablefaturamento = New faturamentoDataTable
        MyBase.Tables.Add(Me.tablefaturamento)
        Me.relationFK_faturamento_instrucao_instrucao = New Global.System.Data.DataRelation("FK_faturamento_instrucao_instrucao", New Global.System.Data.DataColumn() {Me.tableinstrucao.cd_instrucaoColumn}, New Global.System.Data.DataColumn() {Me.tablefaturamento_instrucao.cd_instrucaoColumn}, false)
        Me.Relations.Add(Me.relationFK_faturamento_instrucao_instrucao)
        Me.relationFK_faturamento_instrucao_faturamento = New Global.System.Data.DataRelation("FK_faturamento_instrucao_faturamento", New Global.System.Data.DataColumn() {Me.tablefaturamento.cd_faturamentoColumn}, New Global.System.Data.DataColumn() {Me.tablefaturamento_instrucao.cd_faturamentoColumn}, false)
        Me.Relations.Add(Me.relationFK_faturamento_instrucao_faturamento)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializefaturamento_instrucao() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeinstrucao() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializefaturamento() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.faturamento_instrucao.nr_instrucaoColumn.Expression = "parent(FK_faturamento_instrucao_instrucao).nr_instrucao"
    End Sub
    
    Public Delegate Sub faturamento_instrucaoRowChangeEventHandler(ByVal sender As Object, ByVal e As faturamento_instrucaoRowChangeEvent)
    
    Public Delegate Sub instrucaoRowChangeEventHandler(ByVal sender As Object, ByVal e As instrucaoRowChangeEvent)
    
    Public Delegate Sub faturamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As faturamentoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class faturamento_instrucaoDataTable
        Inherits Global.System.Data.TypedTableBase(Of faturamento_instrucaoRow)
        
        Private columncd_faturamento As Global.System.Data.DataColumn
        
        Private columncd_instrucao As Global.System.Data.DataColumn
        
        Private columnnr_instrucao As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "faturamento_instrucao"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_faturamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_faturamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nr_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnr_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As faturamento_instrucaoRow
            Get
                Return CType(Me.Rows(index),faturamento_instrucaoRow)
            End Get
        End Property
        
        Public Event faturamento_instrucaoRowChanging As faturamento_instrucaoRowChangeEventHandler
        
        Public Event faturamento_instrucaoRowChanged As faturamento_instrucaoRowChangeEventHandler
        
        Public Event faturamento_instrucaoRowDeleting As faturamento_instrucaoRowChangeEventHandler
        
        Public Event faturamento_instrucaoRowDeleted As faturamento_instrucaoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addfaturamento_instrucaoRow(ByVal row As faturamento_instrucaoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addfaturamento_instrucaoRow(ByVal parentfaturamentoRowByFK_faturamento_instrucao_faturamento As faturamentoRow, ByVal parentinstrucaoRowByFK_faturamento_instrucao_instrucao As instrucaoRow, ByVal nr_instrucao As String) As faturamento_instrucaoRow
            Dim rowfaturamento_instrucaoRow As faturamento_instrucaoRow = CType(Me.NewRow,faturamento_instrucaoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, nr_instrucao}
            If (Not (parentfaturamentoRowByFK_faturamento_instrucao_faturamento) Is Nothing) Then
                columnValuesArray(0) = parentfaturamentoRowByFK_faturamento_instrucao_faturamento(0)
            End If
            If (Not (parentinstrucaoRowByFK_faturamento_instrucao_instrucao) Is Nothing) Then
                columnValuesArray(1) = parentinstrucaoRowByFK_faturamento_instrucao_instrucao(0)
            End If
            rowfaturamento_instrucaoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowfaturamento_instrucaoRow)
            Return rowfaturamento_instrucaoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addfaturamento_instrucaoRow(ByVal parentfaturamentoRowByFK_faturamento_instrucao_faturamento As faturamentoRow, ByVal parentinstrucaoRowByFK_faturamento_instrucao_instrucao As instrucaoRow) As faturamento_instrucaoRow
            Dim rowfaturamento_instrucaoRow As faturamento_instrucaoRow = CType(Me.NewRow,faturamento_instrucaoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing}
            If (Not (parentfaturamentoRowByFK_faturamento_instrucao_faturamento) Is Nothing) Then
                columnValuesArray(0) = parentfaturamentoRowByFK_faturamento_instrucao_faturamento(0)
            End If
            If (Not (parentinstrucaoRowByFK_faturamento_instrucao_instrucao) Is Nothing) Then
                columnValuesArray(1) = parentinstrucaoRowByFK_faturamento_instrucao_instrucao(0)
            End If
            rowfaturamento_instrucaoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowfaturamento_instrucaoRow)
            Return rowfaturamento_instrucaoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycd_faturamentocd_instrucao(ByVal cd_faturamento As Integer, ByVal cd_instrucao As Integer) As faturamento_instrucaoRow
            Return CType(Me.Rows.Find(New Object() {cd_faturamento, cd_instrucao}),faturamento_instrucaoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As faturamento_instrucaoDataTable = CType(MyBase.Clone,faturamento_instrucaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New faturamento_instrucaoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncd_faturamento = MyBase.Columns("cd_faturamento")
            Me.columncd_instrucao = MyBase.Columns("cd_instrucao")
            Me.columnnr_instrucao = MyBase.Columns("nr_instrucao")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncd_faturamento = New Global.System.Data.DataColumn("cd_faturamento", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_faturamento)
            Me.columncd_instrucao = New Global.System.Data.DataColumn("cd_instrucao", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_instrucao)
            Me.columnnr_instrucao = New Global.System.Data.DataColumn("nr_instrucao", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnr_instrucao)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncd_faturamento, Me.columncd_instrucao}, true))
            Me.columncd_faturamento.AllowDBNull = false
            Me.columncd_instrucao.AllowDBNull = false
            Me.columnnr_instrucao.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newfaturamento_instrucaoRow() As faturamento_instrucaoRow
            Return CType(Me.NewRow,faturamento_instrucaoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New faturamento_instrucaoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(faturamento_instrucaoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.nr_instrucaoColumn.Expression = "parent(FK_faturamento_instrucao_instrucao).nr_instrucao"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.faturamento_instrucaoRowChangedEvent) Is Nothing) Then
                RaiseEvent faturamento_instrucaoRowChanged(Me, New faturamento_instrucaoRowChangeEvent(CType(e.Row,faturamento_instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.faturamento_instrucaoRowChangingEvent) Is Nothing) Then
                RaiseEvent faturamento_instrucaoRowChanging(Me, New faturamento_instrucaoRowChangeEvent(CType(e.Row,faturamento_instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.faturamento_instrucaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent faturamento_instrucaoRowDeleted(Me, New faturamento_instrucaoRowChangeEvent(CType(e.Row,faturamento_instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.faturamento_instrucaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent faturamento_instrucaoRowDeleting(Me, New faturamento_instrucaoRowChangeEvent(CType(e.Row,faturamento_instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removefaturamento_instrucaoRow(ByVal row As faturamento_instrucaoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "faturamento_instrucaoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class instrucaoDataTable
        Inherits Global.System.Data.TypedTableBase(Of instrucaoRow)
        
        Private columncd_instrucao As Global.System.Data.DataColumn
        
        Private columnnr_instrucao As Global.System.Data.DataColumn
        
        Private columncd_cliente As Global.System.Data.DataColumn
        
        Private columncd_indireto As Global.System.Data.DataColumn
        
        Private columnnm_solicitante As Global.System.Data.DataColumn
        
        Private columnte_solicitante As Global.System.Data.DataColumn
        
        Private columnnm_depto_solicitante As Global.System.Data.DataColumn
        
        Private columnnm_contato_solicitante As Global.System.Data.DataColumn
        
        Private columned_email_solicitante As Global.System.Data.DataColumn
        
        Private columnte_contato As Global.System.Data.DataColumn
        
        Private columntp_instrucao As Global.System.Data.DataColumn
        
        Private columndt_instrucao As Global.System.Data.DataColumn
        
        Private columnds_amostra_padrao As Global.System.Data.DataColumn
        
        Private columnnm_responsavel_amostra As Global.System.Data.DataColumn
        
        Private columnnm_supervisor_amostra As Global.System.Data.DataColumn
        
        Private columnlg_contra_peca As Global.System.Data.DataColumn
        
        Private columnds_contra_peca As Global.System.Data.DataColumn
        
        Private columntx_resumo As Global.System.Data.DataColumn
        
        Private columntx_instrucao As Global.System.Data.DataColumn
        
        Private columntx_cliente As Global.System.Data.DataColumn
        
        Private columnqt_prod_min As Global.System.Data.DataColumn
        
        Private columnqt_prod_med As Global.System.Data.DataColumn
        
        Private columnqt_prod_max As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "instrucao"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nr_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnr_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_indiretoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_indireto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nm_solicitanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnm_solicitante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property te_solicitanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnte_solicitante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nm_depto_solicitanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnm_depto_solicitante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nm_contato_solicitanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnm_contato_solicitante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ed_email_solicitanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columned_email_solicitante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property te_contatoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnte_contato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tp_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntp_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dt_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndt_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ds_amostra_padraoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnds_amostra_padrao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nm_responsavel_amostraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnm_responsavel_amostra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nm_supervisor_amostraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnm_supervisor_amostra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lg_contra_pecaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlg_contra_peca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ds_contra_pecaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnds_contra_peca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tx_resumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntx_resumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tx_instrucaoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntx_instrucao
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tx_clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntx_cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qt_prod_minColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqt_prod_min
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qt_prod_medColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqt_prod_med
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qt_prod_maxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqt_prod_max
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As instrucaoRow
            Get
                Return CType(Me.Rows(index),instrucaoRow)
            End Get
        End Property
        
        Public Event instrucaoRowChanging As instrucaoRowChangeEventHandler
        
        Public Event instrucaoRowChanged As instrucaoRowChangeEventHandler
        
        Public Event instrucaoRowDeleting As instrucaoRowChangeEventHandler
        
        Public Event instrucaoRowDeleted As instrucaoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddinstrucaoRow(ByVal row As instrucaoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddinstrucaoRow( _
                    ByVal nr_instrucao As Long,  _
                    ByVal cd_cliente As Integer,  _
                    ByVal cd_indireto As Integer,  _
                    ByVal nm_solicitante As String,  _
                    ByVal te_solicitante As String,  _
                    ByVal nm_depto_solicitante As String,  _
                    ByVal nm_contato_solicitante As String,  _
                    ByVal ed_email_solicitante As String,  _
                    ByVal te_contato As String,  _
                    ByVal tp_instrucao As Integer,  _
                    ByVal dt_instrucao As Date,  _
                    ByVal ds_amostra_padrao As String,  _
                    ByVal nm_responsavel_amostra As String,  _
                    ByVal nm_supervisor_amostra As String,  _
                    ByVal lg_contra_peca As Boolean,  _
                    ByVal ds_contra_peca As String,  _
                    ByVal tx_resumo As String,  _
                    ByVal tx_instrucao As String,  _
                    ByVal tx_cliente As String,  _
                    ByVal qt_prod_min As Integer,  _
                    ByVal qt_prod_med As Integer,  _
                    ByVal qt_prod_max As Integer) As instrucaoRow
            Dim rowinstrucaoRow As instrucaoRow = CType(Me.NewRow,instrucaoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, nr_instrucao, cd_cliente, cd_indireto, nm_solicitante, te_solicitante, nm_depto_solicitante, nm_contato_solicitante, ed_email_solicitante, te_contato, tp_instrucao, dt_instrucao, ds_amostra_padrao, nm_responsavel_amostra, nm_supervisor_amostra, lg_contra_peca, ds_contra_peca, tx_resumo, tx_instrucao, tx_cliente, qt_prod_min, qt_prod_med, qt_prod_max}
            rowinstrucaoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinstrucaoRow)
            Return rowinstrucaoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycd_instrucao(ByVal cd_instrucao As Integer) As instrucaoRow
            Return CType(Me.Rows.Find(New Object() {cd_instrucao}),instrucaoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As instrucaoDataTable = CType(MyBase.Clone,instrucaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New instrucaoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncd_instrucao = MyBase.Columns("cd_instrucao")
            Me.columnnr_instrucao = MyBase.Columns("nr_instrucao")
            Me.columncd_cliente = MyBase.Columns("cd_cliente")
            Me.columncd_indireto = MyBase.Columns("cd_indireto")
            Me.columnnm_solicitante = MyBase.Columns("nm_solicitante")
            Me.columnte_solicitante = MyBase.Columns("te_solicitante")
            Me.columnnm_depto_solicitante = MyBase.Columns("nm_depto_solicitante")
            Me.columnnm_contato_solicitante = MyBase.Columns("nm_contato_solicitante")
            Me.columned_email_solicitante = MyBase.Columns("ed_email_solicitante")
            Me.columnte_contato = MyBase.Columns("te_contato")
            Me.columntp_instrucao = MyBase.Columns("tp_instrucao")
            Me.columndt_instrucao = MyBase.Columns("dt_instrucao")
            Me.columnds_amostra_padrao = MyBase.Columns("ds_amostra_padrao")
            Me.columnnm_responsavel_amostra = MyBase.Columns("nm_responsavel_amostra")
            Me.columnnm_supervisor_amostra = MyBase.Columns("nm_supervisor_amostra")
            Me.columnlg_contra_peca = MyBase.Columns("lg_contra_peca")
            Me.columnds_contra_peca = MyBase.Columns("ds_contra_peca")
            Me.columntx_resumo = MyBase.Columns("tx_resumo")
            Me.columntx_instrucao = MyBase.Columns("tx_instrucao")
            Me.columntx_cliente = MyBase.Columns("tx_cliente")
            Me.columnqt_prod_min = MyBase.Columns("qt_prod_min")
            Me.columnqt_prod_med = MyBase.Columns("qt_prod_med")
            Me.columnqt_prod_max = MyBase.Columns("qt_prod_max")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncd_instrucao = New Global.System.Data.DataColumn("cd_instrucao", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_instrucao)
            Me.columnnr_instrucao = New Global.System.Data.DataColumn("nr_instrucao", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnr_instrucao)
            Me.columncd_cliente = New Global.System.Data.DataColumn("cd_cliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_cliente)
            Me.columncd_indireto = New Global.System.Data.DataColumn("cd_indireto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_indireto)
            Me.columnnm_solicitante = New Global.System.Data.DataColumn("nm_solicitante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnm_solicitante)
            Me.columnte_solicitante = New Global.System.Data.DataColumn("te_solicitante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnte_solicitante)
            Me.columnnm_depto_solicitante = New Global.System.Data.DataColumn("nm_depto_solicitante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnm_depto_solicitante)
            Me.columnnm_contato_solicitante = New Global.System.Data.DataColumn("nm_contato_solicitante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnm_contato_solicitante)
            Me.columned_email_solicitante = New Global.System.Data.DataColumn("ed_email_solicitante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columned_email_solicitante)
            Me.columnte_contato = New Global.System.Data.DataColumn("te_contato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnte_contato)
            Me.columntp_instrucao = New Global.System.Data.DataColumn("tp_instrucao", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntp_instrucao)
            Me.columndt_instrucao = New Global.System.Data.DataColumn("dt_instrucao", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndt_instrucao)
            Me.columnds_amostra_padrao = New Global.System.Data.DataColumn("ds_amostra_padrao", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnds_amostra_padrao)
            Me.columnnm_responsavel_amostra = New Global.System.Data.DataColumn("nm_responsavel_amostra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnm_responsavel_amostra)
            Me.columnnm_supervisor_amostra = New Global.System.Data.DataColumn("nm_supervisor_amostra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnm_supervisor_amostra)
            Me.columnlg_contra_peca = New Global.System.Data.DataColumn("lg_contra_peca", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlg_contra_peca)
            Me.columnds_contra_peca = New Global.System.Data.DataColumn("ds_contra_peca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnds_contra_peca)
            Me.columntx_resumo = New Global.System.Data.DataColumn("tx_resumo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntx_resumo)
            Me.columntx_instrucao = New Global.System.Data.DataColumn("tx_instrucao", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntx_instrucao)
            Me.columntx_cliente = New Global.System.Data.DataColumn("tx_cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntx_cliente)
            Me.columnqt_prod_min = New Global.System.Data.DataColumn("qt_prod_min", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqt_prod_min)
            Me.columnqt_prod_med = New Global.System.Data.DataColumn("qt_prod_med", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqt_prod_med)
            Me.columnqt_prod_max = New Global.System.Data.DataColumn("qt_prod_max", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqt_prod_max)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncd_instrucao}, true))
            Me.columncd_instrucao.AutoIncrement = true
            Me.columncd_instrucao.AutoIncrementSeed = -1
            Me.columncd_instrucao.AutoIncrementStep = -1
            Me.columncd_instrucao.AllowDBNull = false
            Me.columncd_instrucao.ReadOnly = true
            Me.columncd_instrucao.Unique = true
            Me.columnnr_instrucao.AllowDBNull = false
            Me.columnnm_solicitante.MaxLength = 50
            Me.columnte_solicitante.MaxLength = 11
            Me.columnnm_depto_solicitante.MaxLength = 50
            Me.columnnm_contato_solicitante.MaxLength = 50
            Me.columned_email_solicitante.MaxLength = 200
            Me.columnte_contato.MaxLength = 11
            Me.columnds_amostra_padrao.MaxLength = 50
            Me.columnnm_responsavel_amostra.MaxLength = 120
            Me.columnnm_supervisor_amostra.MaxLength = 120
            Me.columnds_contra_peca.MaxLength = 80
            Me.columntx_resumo.MaxLength = 1000
            Me.columntx_instrucao.MaxLength = 2147483647
            Me.columntx_cliente.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewinstrucaoRow() As instrucaoRow
            Return CType(Me.NewRow,instrucaoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New instrucaoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(instrucaoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.instrucaoRowChangedEvent) Is Nothing) Then
                RaiseEvent instrucaoRowChanged(Me, New instrucaoRowChangeEvent(CType(e.Row,instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.instrucaoRowChangingEvent) Is Nothing) Then
                RaiseEvent instrucaoRowChanging(Me, New instrucaoRowChangeEvent(CType(e.Row,instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.instrucaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent instrucaoRowDeleted(Me, New instrucaoRowChangeEvent(CType(e.Row,instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.instrucaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent instrucaoRowDeleting(Me, New instrucaoRowChangeEvent(CType(e.Row,instrucaoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveinstrucaoRow(ByVal row As instrucaoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "instrucaoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class faturamentoDataTable
        Inherits Global.System.Data.TypedTableBase(Of faturamentoRow)
        
        Private columncd_faturamento As Global.System.Data.DataColumn
        
        Private columncd_cliente As Global.System.Data.DataColumn
        
        Private columndt_faturamento As Global.System.Data.DataColumn
        
        Private columndt_inicial As Global.System.Data.DataColumn
        
        Private columndt_final As Global.System.Data.DataColumn
        
        Private columnds_obs As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "faturamento"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_faturamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_faturamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cd_clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dt_faturamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndt_faturamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dt_inicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndt_inicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dt_finalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndt_final
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ds_obsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnds_obs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As faturamentoRow
            Get
                Return CType(Me.Rows(index),faturamentoRow)
            End Get
        End Property
        
        Public Event faturamentoRowChanging As faturamentoRowChangeEventHandler
        
        Public Event faturamentoRowChanged As faturamentoRowChangeEventHandler
        
        Public Event faturamentoRowDeleting As faturamentoRowChangeEventHandler
        
        Public Event faturamentoRowDeleted As faturamentoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddfaturamentoRow(ByVal row As faturamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddfaturamentoRow(ByVal cd_cliente As Integer, ByVal dt_faturamento As Date, ByVal dt_inicial As Date, ByVal dt_final As Date, ByVal ds_obs As String) As faturamentoRow
            Dim rowfaturamentoRow As faturamentoRow = CType(Me.NewRow,faturamentoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, cd_cliente, dt_faturamento, dt_inicial, dt_final, ds_obs}
            rowfaturamentoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowfaturamentoRow)
            Return rowfaturamentoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycd_faturamento(ByVal cd_faturamento As Integer) As faturamentoRow
            Return CType(Me.Rows.Find(New Object() {cd_faturamento}),faturamentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As faturamentoDataTable = CType(MyBase.Clone,faturamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New faturamentoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncd_faturamento = MyBase.Columns("cd_faturamento")
            Me.columncd_cliente = MyBase.Columns("cd_cliente")
            Me.columndt_faturamento = MyBase.Columns("dt_faturamento")
            Me.columndt_inicial = MyBase.Columns("dt_inicial")
            Me.columndt_final = MyBase.Columns("dt_final")
            Me.columnds_obs = MyBase.Columns("ds_obs")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncd_faturamento = New Global.System.Data.DataColumn("cd_faturamento", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_faturamento)
            Me.columncd_cliente = New Global.System.Data.DataColumn("cd_cliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_cliente)
            Me.columndt_faturamento = New Global.System.Data.DataColumn("dt_faturamento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndt_faturamento)
            Me.columndt_inicial = New Global.System.Data.DataColumn("dt_inicial", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndt_inicial)
            Me.columndt_final = New Global.System.Data.DataColumn("dt_final", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndt_final)
            Me.columnds_obs = New Global.System.Data.DataColumn("ds_obs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnds_obs)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncd_faturamento}, true))
            Me.columncd_faturamento.AutoIncrement = true
            Me.columncd_faturamento.AutoIncrementSeed = -1
            Me.columncd_faturamento.AutoIncrementStep = -1
            Me.columncd_faturamento.AllowDBNull = false
            Me.columncd_faturamento.ReadOnly = true
            Me.columncd_faturamento.Unique = true
            Me.columncd_cliente.AllowDBNull = false
            Me.columndt_faturamento.AllowDBNull = false
            Me.columndt_inicial.AllowDBNull = false
            Me.columndt_final.AllowDBNull = false
            Me.columnds_obs.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewfaturamentoRow() As faturamentoRow
            Return CType(Me.NewRow,faturamentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New faturamentoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(faturamentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.faturamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent faturamentoRowChanged(Me, New faturamentoRowChangeEvent(CType(e.Row,faturamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.faturamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent faturamentoRowChanging(Me, New faturamentoRowChangeEvent(CType(e.Row,faturamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.faturamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent faturamentoRowDeleted(Me, New faturamentoRowChangeEvent(CType(e.Row,faturamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.faturamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent faturamentoRowDeleting(Me, New faturamentoRowChangeEvent(CType(e.Row,faturamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovefaturamentoRow(ByVal row As faturamentoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "faturamentoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class faturamento_instrucaoRow
        Inherits Global.System.Data.DataRow
        
        Private tablefaturamento_instrucao As faturamento_instrucaoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablefaturamento_instrucao = CType(Me.Table,faturamento_instrucaoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_faturamento() As Integer
            Get
                Return CType(Me(Me.tablefaturamento_instrucao.cd_faturamentoColumn),Integer)
            End Get
            Set
                Me(Me.tablefaturamento_instrucao.cd_faturamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_instrucao() As Integer
            Get
                Return CType(Me(Me.tablefaturamento_instrucao.cd_instrucaoColumn),Integer)
            End Get
            Set
                Me(Me.tablefaturamento_instrucao.cd_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nr_instrucao() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaturamento_instrucao.nr_instrucaoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nr_instrucao' in table 'faturamento_instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaturamento_instrucao.nr_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property instrucaoRow() As instrucaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_faturamento_instrucao_instrucao")),instrucaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_faturamento_instrucao_instrucao"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property faturamentoRow() As faturamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_faturamento_instrucao_faturamento")),faturamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_faturamento_instrucao_faturamento"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnr_instrucaoNull() As Boolean
            Return Me.IsNull(Me.tablefaturamento_instrucao.nr_instrucaoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnr_instrucaoNull()
            Me(Me.tablefaturamento_instrucao.nr_instrucaoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class instrucaoRow
        Inherits Global.System.Data.DataRow
        
        Private tableinstrucao As instrucaoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinstrucao = CType(Me.Table,instrucaoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_instrucao() As Integer
            Get
                Return CType(Me(Me.tableinstrucao.cd_instrucaoColumn),Integer)
            End Get
            Set
                Me(Me.tableinstrucao.cd_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nr_instrucao() As Long
            Get
                Return CType(Me(Me.tableinstrucao.nr_instrucaoColumn),Long)
            End Get
            Set
                Me(Me.tableinstrucao.nr_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_cliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.cd_clienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cd_cliente' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.cd_clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_indireto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.cd_indiretoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cd_indireto' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.cd_indiretoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nm_solicitante() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.nm_solicitanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nm_solicitante' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.nm_solicitanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property te_solicitante() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.te_solicitanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'te_solicitante' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.te_solicitanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nm_depto_solicitante() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.nm_depto_solicitanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nm_depto_solicitante' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.nm_depto_solicitanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nm_contato_solicitante() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.nm_contato_solicitanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nm_contato_solicitante' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.nm_contato_solicitanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ed_email_solicitante() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.ed_email_solicitanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ed_email_solicitante' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.ed_email_solicitanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property te_contato() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.te_contatoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'te_contato' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.te_contatoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tp_instrucao() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.tp_instrucaoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tp_instrucao' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.tp_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dt_instrucao() As Date
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.dt_instrucaoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dt_instrucao' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.dt_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ds_amostra_padrao() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.ds_amostra_padraoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ds_amostra_padrao' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.ds_amostra_padraoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nm_responsavel_amostra() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.nm_responsavel_amostraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nm_responsavel_amostra' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.nm_responsavel_amostraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nm_supervisor_amostra() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.nm_supervisor_amostraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nm_supervisor_amostra' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.nm_supervisor_amostraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lg_contra_peca() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.lg_contra_pecaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lg_contra_peca' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.lg_contra_pecaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ds_contra_peca() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.ds_contra_pecaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ds_contra_peca' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.ds_contra_pecaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tx_resumo() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.tx_resumoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tx_resumo' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.tx_resumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tx_instrucao() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.tx_instrucaoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tx_instrucao' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.tx_instrucaoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tx_cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.tx_clienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tx_cliente' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.tx_clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qt_prod_min() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.qt_prod_minColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qt_prod_min' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.qt_prod_minColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qt_prod_med() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.qt_prod_medColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qt_prod_med' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.qt_prod_medColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qt_prod_max() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableinstrucao.qt_prod_maxColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qt_prod_max' in table 'instrucao' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstrucao.qt_prod_maxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscd_clienteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.cd_clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcd_clienteNull()
            Me(Me.tableinstrucao.cd_clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscd_indiretoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.cd_indiretoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcd_indiretoNull()
            Me(Me.tableinstrucao.cd_indiretoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnm_solicitanteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.nm_solicitanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnm_solicitanteNull()
            Me(Me.tableinstrucao.nm_solicitanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iste_solicitanteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.te_solicitanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sette_solicitanteNull()
            Me(Me.tableinstrucao.te_solicitanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnm_depto_solicitanteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.nm_depto_solicitanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnm_depto_solicitanteNull()
            Me(Me.tableinstrucao.nm_depto_solicitanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnm_contato_solicitanteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.nm_contato_solicitanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnm_contato_solicitanteNull()
            Me(Me.tableinstrucao.nm_contato_solicitanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ised_email_solicitanteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.ed_email_solicitanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Seted_email_solicitanteNull()
            Me(Me.tableinstrucao.ed_email_solicitanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iste_contatoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.te_contatoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Sette_contatoNull()
            Me(Me.tableinstrucao.te_contatoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istp_instrucaoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.tp_instrucaoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settp_instrucaoNull()
            Me(Me.tableinstrucao.tp_instrucaoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdt_instrucaoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.dt_instrucaoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdt_instrucaoNull()
            Me(Me.tableinstrucao.dt_instrucaoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isds_amostra_padraoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.ds_amostra_padraoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setds_amostra_padraoNull()
            Me(Me.tableinstrucao.ds_amostra_padraoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnm_responsavel_amostraNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.nm_responsavel_amostraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnm_responsavel_amostraNull()
            Me(Me.tableinstrucao.nm_responsavel_amostraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnm_supervisor_amostraNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.nm_supervisor_amostraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnm_supervisor_amostraNull()
            Me(Me.tableinstrucao.nm_supervisor_amostraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islg_contra_pecaNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.lg_contra_pecaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlg_contra_pecaNull()
            Me(Me.tableinstrucao.lg_contra_pecaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isds_contra_pecaNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.ds_contra_pecaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setds_contra_pecaNull()
            Me(Me.tableinstrucao.ds_contra_pecaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istx_resumoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.tx_resumoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settx_resumoNull()
            Me(Me.tableinstrucao.tx_resumoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istx_instrucaoNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.tx_instrucaoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settx_instrucaoNull()
            Me(Me.tableinstrucao.tx_instrucaoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istx_clienteNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.tx_clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settx_clienteNull()
            Me(Me.tableinstrucao.tx_clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqt_prod_minNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.qt_prod_minColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqt_prod_minNull()
            Me(Me.tableinstrucao.qt_prod_minColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqt_prod_medNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.qt_prod_medColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqt_prod_medNull()
            Me(Me.tableinstrucao.qt_prod_medColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqt_prod_maxNull() As Boolean
            Return Me.IsNull(Me.tableinstrucao.qt_prod_maxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqt_prod_maxNull()
            Me(Me.tableinstrucao.qt_prod_maxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getfaturamento_instrucaoRows() As faturamento_instrucaoRow()
            If (Me.Table.ChildRelations("FK_faturamento_instrucao_instrucao") Is Nothing) Then
                Return New faturamento_instrucaoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_faturamento_instrucao_instrucao")),faturamento_instrucaoRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class faturamentoRow
        Inherits Global.System.Data.DataRow
        
        Private tablefaturamento As faturamentoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablefaturamento = CType(Me.Table,faturamentoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_faturamento() As Integer
            Get
                Return CType(Me(Me.tablefaturamento.cd_faturamentoColumn),Integer)
            End Get
            Set
                Me(Me.tablefaturamento.cd_faturamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cd_cliente() As Integer
            Get
                Return CType(Me(Me.tablefaturamento.cd_clienteColumn),Integer)
            End Get
            Set
                Me(Me.tablefaturamento.cd_clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dt_faturamento() As Date
            Get
                Return CType(Me(Me.tablefaturamento.dt_faturamentoColumn),Date)
            End Get
            Set
                Me(Me.tablefaturamento.dt_faturamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dt_inicial() As Date
            Get
                Return CType(Me(Me.tablefaturamento.dt_inicialColumn),Date)
            End Get
            Set
                Me(Me.tablefaturamento.dt_inicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dt_final() As Date
            Get
                Return CType(Me(Me.tablefaturamento.dt_finalColumn),Date)
            End Get
            Set
                Me(Me.tablefaturamento.dt_finalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ds_obs() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaturamento.ds_obsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ds_obs' in table 'faturamento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaturamento.ds_obsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isds_obsNull() As Boolean
            Return Me.IsNull(Me.tablefaturamento.ds_obsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setds_obsNull()
            Me(Me.tablefaturamento.ds_obsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getfaturamento_instrucaoRows() As faturamento_instrucaoRow()
            If (Me.Table.ChildRelations("FK_faturamento_instrucao_faturamento") Is Nothing) Then
                Return New faturamento_instrucaoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_faturamento_instrucao_faturamento")),faturamento_instrucaoRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class faturamento_instrucaoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As faturamento_instrucaoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As faturamento_instrucaoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As faturamento_instrucaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class instrucaoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As instrucaoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As instrucaoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As instrucaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class faturamentoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As faturamentoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As faturamentoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As faturamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class faturamento_instrucaoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "faturamento_instrucao"
            tableMapping.ColumnMappings.Add("cd_faturamento", "cd_faturamento")
            tableMapping.ColumnMappings.Add("cd_instrucao", "cd_instrucao")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[faturamento_instrucao] WHERE (([cd_faturamento] = @Original_cd"& _ 
                "_faturamento) AND ([cd_instrucao] = @Original_cd_instrucao))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_faturamento", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[faturamento_instrucao] ([cd_faturamento], [cd_instrucao]) VALU"& _ 
                "ES (@cd_faturamento, @cd_instrucao);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cd_faturamento, cd_instrucao FROM f"& _ 
                "aturamento_instrucao WHERE (cd_faturamento = @cd_faturamento) AND (cd_instrucao "& _ 
                "= @cd_instrucao)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_faturamento", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[faturamento_instrucao] SET [cd_faturamento] = @cd_faturamento, [cd_"& _ 
                "instrucao] = @cd_instrucao WHERE (([cd_faturamento] = @Original_cd_faturamento) "& _ 
                "AND ([cd_instrucao] = @Original_cd_instrucao));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cd_faturamento, cd_instr"& _ 
                "ucao FROM faturamento_instrucao WHERE (cd_faturamento = @cd_faturamento) AND (cd"& _ 
                "_instrucao = @cd_instrucao)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_faturamento", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_faturamento", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.eyeConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cd_faturamento, cd_instrucao FROM dbo.faturamento_instrucao"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.faturamento_instrucaoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.faturamento_instrucaoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.faturamento_instrucaoDataTable = New DataSet1.faturamento_instrucaoDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.faturamento_instrucaoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "faturamento_instrucao")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cd_faturamento As Integer, ByVal Original_cd_instrucao As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cd_faturamento,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cd_instrucao,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cd_faturamento As Integer, ByVal cd_instrucao As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cd_faturamento,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cd_instrucao,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cd_faturamento As Integer, ByVal cd_instrucao As Integer, ByVal Original_cd_faturamento As Integer, ByVal Original_cd_instrucao As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cd_faturamento,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cd_instrucao,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_cd_faturamento,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_cd_instrucao,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_cd_faturamento As Integer, ByVal Original_cd_instrucao As Integer) As Integer
            Return Me.Update(Original_cd_faturamento, Original_cd_instrucao, Original_cd_faturamento, Original_cd_instrucao)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class instrucaoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "instrucao"
            tableMapping.ColumnMappings.Add("cd_instrucao", "cd_instrucao")
            tableMapping.ColumnMappings.Add("nr_instrucao", "nr_instrucao")
            tableMapping.ColumnMappings.Add("cd_cliente", "cd_cliente")
            tableMapping.ColumnMappings.Add("cd_indireto", "cd_indireto")
            tableMapping.ColumnMappings.Add("nm_solicitante", "nm_solicitante")
            tableMapping.ColumnMappings.Add("te_solicitante", "te_solicitante")
            tableMapping.ColumnMappings.Add("nm_depto_solicitante", "nm_depto_solicitante")
            tableMapping.ColumnMappings.Add("nm_contato_solicitante", "nm_contato_solicitante")
            tableMapping.ColumnMappings.Add("ed_email_solicitante", "ed_email_solicitante")
            tableMapping.ColumnMappings.Add("te_contato", "te_contato")
            tableMapping.ColumnMappings.Add("tp_instrucao", "tp_instrucao")
            tableMapping.ColumnMappings.Add("dt_instrucao", "dt_instrucao")
            tableMapping.ColumnMappings.Add("ds_amostra_padrao", "ds_amostra_padrao")
            tableMapping.ColumnMappings.Add("nm_responsavel_amostra", "nm_responsavel_amostra")
            tableMapping.ColumnMappings.Add("nm_supervisor_amostra", "nm_supervisor_amostra")
            tableMapping.ColumnMappings.Add("lg_contra_peca", "lg_contra_peca")
            tableMapping.ColumnMappings.Add("ds_contra_peca", "ds_contra_peca")
            tableMapping.ColumnMappings.Add("tx_resumo", "tx_resumo")
            tableMapping.ColumnMappings.Add("tx_instrucao", "tx_instrucao")
            tableMapping.ColumnMappings.Add("tx_cliente", "tx_cliente")
            tableMapping.ColumnMappings.Add("qt_prod_min", "qt_prod_min")
            tableMapping.ColumnMappings.Add("qt_prod_med", "qt_prod_med")
            tableMapping.ColumnMappings.Add("qt_prod_max", "qt_prod_max")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[instrucao] WHERE (([cd_instrucao] = @Original_cd_instrucao) AN"& _ 
                "D ([nr_instrucao] = @Original_nr_instrucao) AND ((@IsNull_cd_cliente = 1 AND [cd"& _ 
                "_cliente] IS NULL) OR ([cd_cliente] = @Original_cd_cliente)) AND ((@IsNull_cd_in"& _ 
                "direto = 1 AND [cd_indireto] IS NULL) OR ([cd_indireto] = @Original_cd_indireto)"& _ 
                ") AND ((@IsNull_nm_solicitante = 1 AND [nm_solicitante] IS NULL) OR ([nm_solicit"& _ 
                "ante] = @Original_nm_solicitante)) AND ((@IsNull_te_solicitante = 1 AND [te_soli"& _ 
                "citante] IS NULL) OR ([te_solicitante] = @Original_te_solicitante)) AND ((@IsNul"& _ 
                "l_nm_depto_solicitante = 1 AND [nm_depto_solicitante] IS NULL) OR ([nm_depto_sol"& _ 
                "icitante] = @Original_nm_depto_solicitante)) AND ((@IsNull_nm_contato_solicitant"& _ 
                "e = 1 AND [nm_contato_solicitante] IS NULL) OR ([nm_contato_solicitante] = @Orig"& _ 
                "inal_nm_contato_solicitante)) AND ((@IsNull_ed_email_solicitante = 1 AND [ed_ema"& _ 
                "il_solicitante] IS NULL) OR ([ed_email_solicitante] = @Original_ed_email_solicit"& _ 
                "ante)) AND ((@IsNull_te_contato = 1 AND [te_contato] IS NULL) OR ([te_contato] ="& _ 
                " @Original_te_contato)) AND ((@IsNull_tp_instrucao = 1 AND [tp_instrucao] IS NUL"& _ 
                "L) OR ([tp_instrucao] = @Original_tp_instrucao)) AND ((@IsNull_dt_instrucao = 1 "& _ 
                "AND [dt_instrucao] IS NULL) OR ([dt_instrucao] = @Original_dt_instrucao)) AND (("& _ 
                "@IsNull_ds_amostra_padrao = 1 AND [ds_amostra_padrao] IS NULL) OR ([ds_amostra_p"& _ 
                "adrao] = @Original_ds_amostra_padrao)) AND ((@IsNull_nm_responsavel_amostra = 1 "& _ 
                "AND [nm_responsavel_amostra] IS NULL) OR ([nm_responsavel_amostra] = @Original_n"& _ 
                "m_responsavel_amostra)) AND ((@IsNull_nm_supervisor_amostra = 1 AND [nm_supervis"& _ 
                "or_amostra] IS NULL) OR ([nm_supervisor_amostra] = @Original_nm_supervisor_amost"& _ 
                "ra)) AND ((@IsNull_lg_contra_peca = 1 AND [lg_contra_peca] IS NULL) OR ([lg_cont"& _ 
                "ra_peca] = @Original_lg_contra_peca)) AND ((@IsNull_ds_contra_peca = 1 AND [ds_c"& _ 
                "ontra_peca] IS NULL) OR ([ds_contra_peca] = @Original_ds_contra_peca)) AND ((@Is"& _ 
                "Null_tx_resumo = 1 AND [tx_resumo] IS NULL) OR ([tx_resumo] = @Original_tx_resum"& _ 
                "o)) AND ((@IsNull_qt_prod_min = 1 AND [qt_prod_min] IS NULL) OR ([qt_prod_min] ="& _ 
                " @Original_qt_prod_min)) AND ((@IsNull_qt_prod_med = 1 AND [qt_prod_med] IS NULL"& _ 
                ") OR ([qt_prod_med] = @Original_qt_prod_med)) AND ((@IsNull_qt_prod_max = 1 AND "& _ 
                "[qt_prod_max] IS NULL) OR ([qt_prod_max] = @Original_qt_prod_max)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nr_instrucao", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nr_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cd_indireto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_indireto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_indireto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_indireto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_te_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_te_solicitante", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_depto_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_depto_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_depto_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_depto_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_contato_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_contato_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_contato_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_contato_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ed_email_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ed_email_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ed_email_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ed_email_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_te_contato", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_contato", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_te_contato", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_contato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_tp_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tp_instrucao", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tp_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tp_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dt_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_instrucao", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_instrucao", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ds_amostra_padrao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_amostra_padrao", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ds_amostra_padrao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_amostra_padrao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_responsavel_amostra", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_responsavel_amostra", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_responsavel_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_responsavel_amostra", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_supervisor_amostra", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_supervisor_amostra", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_supervisor_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_supervisor_amostra", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_lg_contra_peca", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lg_contra_peca", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lg_contra_peca", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lg_contra_peca", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ds_contra_peca", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_contra_peca", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ds_contra_peca", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_contra_peca", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_tx_resumo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_resumo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tx_resumo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_resumo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_qt_prod_min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_min", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qt_prod_min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_qt_prod_med", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_med", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qt_prod_med", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_med", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_qt_prod_max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_max", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qt_prod_max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[instrucao] ([nr_instrucao], [cd_cliente], [cd_indireto], [nm_s"& _ 
                "olicitante], [te_solicitante], [nm_depto_solicitante], [nm_contato_solicitante],"& _ 
                " [ed_email_solicitante], [te_contato], [tp_instrucao], [dt_instrucao], [ds_amost"& _ 
                "ra_padrao], [nm_responsavel_amostra], [nm_supervisor_amostra], [lg_contra_peca],"& _ 
                " [ds_contra_peca], [tx_resumo], [tx_instrucao], [tx_cliente], [qt_prod_min], [qt"& _ 
                "_prod_med], [qt_prod_max]) VALUES (@nr_instrucao, @cd_cliente, @cd_indireto, @nm"& _ 
                "_solicitante, @te_solicitante, @nm_depto_solicitante, @nm_contato_solicitante, @"& _ 
                "ed_email_solicitante, @te_contato, @tp_instrucao, @dt_instrucao, @ds_amostra_pad"& _ 
                "rao, @nm_responsavel_amostra, @nm_supervisor_amostra, @lg_contra_peca, @ds_contr"& _ 
                "a_peca, @tx_resumo, @tx_instrucao, @tx_cliente, @qt_prod_min, @qt_prod_med, @qt_"& _ 
                "prod_max);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cd_instrucao, nr_instrucao, cd_cliente, cd_indireto, nm_solic"& _ 
                "itante, te_solicitante, nm_depto_solicitante, nm_contato_solicitante, ed_email_s"& _ 
                "olicitante, te_contato, tp_instrucao, dt_instrucao, ds_amostra_padrao, nm_respon"& _ 
                "savel_amostra, nm_supervisor_amostra, lg_contra_peca, ds_contra_peca, tx_resumo,"& _ 
                " tx_instrucao, tx_cliente, qt_prod_min, qt_prod_med, qt_prod_max FROM instrucao "& _ 
                "WHERE (cd_instrucao = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nr_instrucao", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nr_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_indireto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_indireto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@te_solicitante", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_depto_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_depto_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_contato_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_contato_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ed_email_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ed_email_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@te_contato", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_contato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tp_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tp_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_instrucao", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ds_amostra_padrao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_amostra_padrao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_responsavel_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_responsavel_amostra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_supervisor_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_supervisor_amostra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lg_contra_peca", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lg_contra_peca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ds_contra_peca", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_contra_peca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tx_resumo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_resumo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tx_instrucao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tx_cliente", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qt_prod_min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qt_prod_med", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_med", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qt_prod_max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[instrucao] SET [nr_instrucao] = @nr_instrucao, [cd_cliente] = @cd_c"& _ 
                "liente, [cd_indireto] = @cd_indireto, [nm_solicitante] = @nm_solicitante, [te_so"& _ 
                "licitante] = @te_solicitante, [nm_depto_solicitante] = @nm_depto_solicitante, [n"& _ 
                "m_contato_solicitante] = @nm_contato_solicitante, [ed_email_solicitante] = @ed_e"& _ 
                "mail_solicitante, [te_contato] = @te_contato, [tp_instrucao] = @tp_instrucao, [d"& _ 
                "t_instrucao] = @dt_instrucao, [ds_amostra_padrao] = @ds_amostra_padrao, [nm_resp"& _ 
                "onsavel_amostra] = @nm_responsavel_amostra, [nm_supervisor_amostra] = @nm_superv"& _ 
                "isor_amostra, [lg_contra_peca] = @lg_contra_peca, [ds_contra_peca] = @ds_contra_"& _ 
                "peca, [tx_resumo] = @tx_resumo, [tx_instrucao] = @tx_instrucao, [tx_cliente] = @"& _ 
                "tx_cliente, [qt_prod_min] = @qt_prod_min, [qt_prod_med] = @qt_prod_med, [qt_prod"& _ 
                "_max] = @qt_prod_max WHERE (([cd_instrucao] = @Original_cd_instrucao) AND ([nr_i"& _ 
                "nstrucao] = @Original_nr_instrucao) AND ((@IsNull_cd_cliente = 1 AND [cd_cliente"& _ 
                "] IS NULL) OR ([cd_cliente] = @Original_cd_cliente)) AND ((@IsNull_cd_indireto ="& _ 
                " 1 AND [cd_indireto] IS NULL) OR ([cd_indireto] = @Original_cd_indireto)) AND (("& _ 
                "@IsNull_nm_solicitante = 1 AND [nm_solicitante] IS NULL) OR ([nm_solicitante] = "& _ 
                "@Original_nm_solicitante)) AND ((@IsNull_te_solicitante = 1 AND [te_solicitante]"& _ 
                " IS NULL) OR ([te_solicitante] = @Original_te_solicitante)) AND ((@IsNull_nm_dep"& _ 
                "to_solicitante = 1 AND [nm_depto_solicitante] IS NULL) OR ([nm_depto_solicitante"& _ 
                "] = @Original_nm_depto_solicitante)) AND ((@IsNull_nm_contato_solicitante = 1 AN"& _ 
                "D [nm_contato_solicitante] IS NULL) OR ([nm_contato_solicitante] = @Original_nm_"& _ 
                "contato_solicitante)) AND ((@IsNull_ed_email_solicitante = 1 AND [ed_email_solic"& _ 
                "itante] IS NULL) OR ([ed_email_solicitante] = @Original_ed_email_solicitante)) A"& _ 
                "ND ((@IsNull_te_contato = 1 AND [te_contato] IS NULL) OR ([te_contato] = @Origin"& _ 
                "al_te_contato)) AND ((@IsNull_tp_instrucao = 1 AND [tp_instrucao] IS NULL) OR (["& _ 
                "tp_instrucao] = @Original_tp_instrucao)) AND ((@IsNull_dt_instrucao = 1 AND [dt_"& _ 
                "instrucao] IS NULL) OR ([dt_instrucao] = @Original_dt_instrucao)) AND ((@IsNull_"& _ 
                "ds_amostra_padrao = 1 AND [ds_amostra_padrao] IS NULL) OR ([ds_amostra_padrao] ="& _ 
                " @Original_ds_amostra_padrao)) AND ((@IsNull_nm_responsavel_amostra = 1 AND [nm_"& _ 
                "responsavel_amostra] IS NULL) OR ([nm_responsavel_amostra] = @Original_nm_respon"& _ 
                "savel_amostra)) AND ((@IsNull_nm_supervisor_amostra = 1 AND [nm_supervisor_amost"& _ 
                "ra] IS NULL) OR ([nm_supervisor_amostra] = @Original_nm_supervisor_amostra)) AND"& _ 
                " ((@IsNull_lg_contra_peca = 1 AND [lg_contra_peca] IS NULL) OR ([lg_contra_peca]"& _ 
                " = @Original_lg_contra_peca)) AND ((@IsNull_ds_contra_peca = 1 AND [ds_contra_pe"& _ 
                "ca] IS NULL) OR ([ds_contra_peca] = @Original_ds_contra_peca)) AND ((@IsNull_tx_"& _ 
                "resumo = 1 AND [tx_resumo] IS NULL) OR ([tx_resumo] = @Original_tx_resumo)) AND "& _ 
                "((@IsNull_qt_prod_min = 1 AND [qt_prod_min] IS NULL) OR ([qt_prod_min] = @Origin"& _ 
                "al_qt_prod_min)) AND ((@IsNull_qt_prod_med = 1 AND [qt_prod_med] IS NULL) OR ([q"& _ 
                "t_prod_med] = @Original_qt_prod_med)) AND ((@IsNull_qt_prod_max = 1 AND [qt_prod"& _ 
                "_max] IS NULL) OR ([qt_prod_max] = @Original_qt_prod_max)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cd_instruca"& _ 
                "o, nr_instrucao, cd_cliente, cd_indireto, nm_solicitante, te_solicitante, nm_dep"& _ 
                "to_solicitante, nm_contato_solicitante, ed_email_solicitante, te_contato, tp_ins"& _ 
                "trucao, dt_instrucao, ds_amostra_padrao, nm_responsavel_amostra, nm_supervisor_a"& _ 
                "mostra, lg_contra_peca, ds_contra_peca, tx_resumo, tx_instrucao, tx_cliente, qt_"& _ 
                "prod_min, qt_prod_med, qt_prod_max FROM instrucao WHERE (cd_instrucao = @cd_inst"& _ 
                "rucao)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nr_instrucao", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nr_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_indireto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_indireto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@te_solicitante", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_depto_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_depto_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_contato_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_contato_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ed_email_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ed_email_solicitante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@te_contato", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_contato", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tp_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tp_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_instrucao", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ds_amostra_padrao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_amostra_padrao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_responsavel_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_responsavel_amostra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nm_supervisor_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_supervisor_amostra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lg_contra_peca", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lg_contra_peca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ds_contra_peca", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_contra_peca", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tx_resumo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_resumo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tx_instrucao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tx_cliente", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qt_prod_min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qt_prod_med", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_med", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qt_prod_max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nr_instrucao", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nr_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cd_indireto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_indireto", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_indireto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_indireto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_te_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_te_solicitante", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_depto_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_depto_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_depto_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_depto_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_contato_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_contato_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_contato_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_contato_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ed_email_solicitante", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ed_email_solicitante", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ed_email_solicitante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ed_email_solicitante", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_te_contato", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_contato", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_te_contato", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "te_contato", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_tp_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tp_instrucao", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tp_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tp_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dt_instrucao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_instrucao", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_instrucao", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_instrucao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ds_amostra_padrao", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_amostra_padrao", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ds_amostra_padrao", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_amostra_padrao", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_responsavel_amostra", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_responsavel_amostra", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_responsavel_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_responsavel_amostra", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_nm_supervisor_amostra", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_supervisor_amostra", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nm_supervisor_amostra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nm_supervisor_amostra", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_lg_contra_peca", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lg_contra_peca", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lg_contra_peca", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lg_contra_peca", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ds_contra_peca", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_contra_peca", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ds_contra_peca", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_contra_peca", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_tx_resumo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_resumo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tx_resumo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tx_resumo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_qt_prod_min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_min", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qt_prod_min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_qt_prod_med", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_med", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qt_prod_med", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_med", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_qt_prod_max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_max", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qt_prod_max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qt_prod_max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_instrucao", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_instrucao", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.eyeConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cd_instrucao, nr_instrucao, cd_cliente, cd_indireto, nm_solicitante, te_so"& _ 
                "licitante, nm_depto_solicitante, nm_contato_solicitante, ed_email_solicitante, t"& _ 
                "e_contato, tp_instrucao, dt_instrucao, ds_amostra_padrao, nm_responsavel_amostra"& _ 
                ", nm_supervisor_amostra, lg_contra_peca, ds_contra_peca, tx_resumo, tx_instrucao"& _ 
                ", tx_cliente, qt_prod_min, qt_prod_med, qt_prod_max FROM dbo.instrucao"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.instrucaoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.instrucaoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.instrucaoDataTable = New DataSet1.instrucaoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.instrucaoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "instrucao")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_cd_instrucao As Integer,  _
                    ByVal Original_nr_instrucao As Long,  _
                    ByVal Original_cd_cliente As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cd_indireto As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nm_solicitante As String,  _
                    ByVal Original_te_solicitante As String,  _
                    ByVal Original_nm_depto_solicitante As String,  _
                    ByVal Original_nm_contato_solicitante As String,  _
                    ByVal Original_ed_email_solicitante As String,  _
                    ByVal Original_te_contato As String,  _
                    ByVal Original_tp_instrucao As Global.System.Nullable(Of Integer),  _
                    ByVal Original_dt_instrucao As Global.System.Nullable(Of Date),  _
                    ByVal Original_ds_amostra_padrao As String,  _
                    ByVal Original_nm_responsavel_amostra As String,  _
                    ByVal Original_nm_supervisor_amostra As String,  _
                    ByVal Original_lg_contra_peca As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ds_contra_peca As String,  _
                    ByVal Original_tx_resumo As String,  _
                    ByVal Original_qt_prod_min As Global.System.Nullable(Of Integer),  _
                    ByVal Original_qt_prod_med As Global.System.Nullable(Of Integer),  _
                    ByVal Original_qt_prod_max As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cd_instrucao,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nr_instrucao,Long)
            If (Original_cd_cliente.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_cd_cliente.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_cd_indireto.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_cd_indireto.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_nm_solicitante Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_nm_solicitante,String)
            End If
            If (Original_te_solicitante Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_te_solicitante,String)
            End If
            If (Original_nm_depto_solicitante Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_nm_depto_solicitante,String)
            End If
            If (Original_nm_contato_solicitante Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_nm_contato_solicitante,String)
            End If
            If (Original_ed_email_solicitante Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ed_email_solicitante,String)
            End If
            If (Original_te_contato Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_te_contato,String)
            End If
            If (Original_tp_instrucao.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_tp_instrucao.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_dt_instrucao.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_dt_instrucao.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ds_amostra_padrao Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_ds_amostra_padrao,String)
            End If
            If (Original_nm_responsavel_amostra Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_nm_responsavel_amostra,String)
            End If
            If (Original_nm_supervisor_amostra Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_nm_supervisor_amostra,String)
            End If
            If (Original_lg_contra_peca.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_lg_contra_peca.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_ds_contra_peca Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_ds_contra_peca,String)
            End If
            If (Original_tx_resumo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_tx_resumo,String)
            End If
            If (Original_qt_prod_min.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_qt_prod_min.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_qt_prod_med.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_qt_prod_med.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_qt_prod_max.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_qt_prod_max.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal nr_instrucao As Long,  _
                    ByVal cd_cliente As Global.System.Nullable(Of Integer),  _
                    ByVal cd_indireto As Global.System.Nullable(Of Integer),  _
                    ByVal nm_solicitante As String,  _
                    ByVal te_solicitante As String,  _
                    ByVal nm_depto_solicitante As String,  _
                    ByVal nm_contato_solicitante As String,  _
                    ByVal ed_email_solicitante As String,  _
                    ByVal te_contato As String,  _
                    ByVal tp_instrucao As Global.System.Nullable(Of Integer),  _
                    ByVal dt_instrucao As Global.System.Nullable(Of Date),  _
                    ByVal ds_amostra_padrao As String,  _
                    ByVal nm_responsavel_amostra As String,  _
                    ByVal nm_supervisor_amostra As String,  _
                    ByVal lg_contra_peca As Global.System.Nullable(Of Boolean),  _
                    ByVal ds_contra_peca As String,  _
                    ByVal tx_resumo As String,  _
                    ByVal tx_instrucao As String,  _
                    ByVal tx_cliente As String,  _
                    ByVal qt_prod_min As Global.System.Nullable(Of Integer),  _
                    ByVal qt_prod_med As Global.System.Nullable(Of Integer),  _
                    ByVal qt_prod_max As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(nr_instrucao,Long)
            If (cd_cliente.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(cd_cliente.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (cd_indireto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cd_indireto.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nm_solicitante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nm_solicitante,String)
            End If
            If (te_solicitante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(te_solicitante,String)
            End If
            If (nm_depto_solicitante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nm_depto_solicitante,String)
            End If
            If (nm_contato_solicitante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nm_contato_solicitante,String)
            End If
            If (ed_email_solicitante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ed_email_solicitante,String)
            End If
            If (te_contato Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(te_contato,String)
            End If
            If (tp_instrucao.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(tp_instrucao.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (dt_instrucao.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(dt_instrucao.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ds_amostra_padrao Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ds_amostra_padrao,String)
            End If
            If (nm_responsavel_amostra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(nm_responsavel_amostra,String)
            End If
            If (nm_supervisor_amostra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(nm_supervisor_amostra,String)
            End If
            If (lg_contra_peca.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(lg_contra_peca.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (ds_contra_peca Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ds_contra_peca,String)
            End If
            If (tx_resumo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tx_resumo,String)
            End If
            If (tx_instrucao Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(tx_instrucao,String)
            End If
            If (tx_cliente Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(tx_cliente,String)
            End If
            If (qt_prod_min.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(qt_prod_min.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (qt_prod_med.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(qt_prod_med.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (qt_prod_max.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(qt_prod_max.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nr_instrucao As Long,  _
                    ByVal cd_cliente As Global.System.Nullable(Of Integer),  _
                    ByVal cd_indireto As Global.System.Nullable(Of Integer),  _
                    ByVal nm_solicitante As String,  _
                    ByVal te_solicitante As String,  _
                    ByVal nm_depto_solicitante As String,  _
                    ByVal nm_contato_solicitante As String,  _
                    ByVal ed_email_solicitante As String,  _
                    ByVal te_contato As String,  _
                    ByVal tp_instrucao As Global.System.Nullable(Of Integer),  _
                    ByVal dt_instrucao As Global.System.Nullable(Of Date),  _
                    ByVal ds_amostra_padrao As String,  _
                    ByVal nm_responsavel_amostra As String,  _
                    ByVal nm_supervisor_amostra As String,  _
                    ByVal lg_contra_peca As Global.System.Nullable(Of Boolean),  _
                    ByVal ds_contra_peca As String,  _
                    ByVal tx_resumo As String,  _
                    ByVal tx_instrucao As String,  _
                    ByVal tx_cliente As String,  _
                    ByVal qt_prod_min As Global.System.Nullable(Of Integer),  _
                    ByVal qt_prod_med As Global.System.Nullable(Of Integer),  _
                    ByVal qt_prod_max As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cd_instrucao As Integer,  _
                    ByVal Original_nr_instrucao As Long,  _
                    ByVal Original_cd_cliente As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cd_indireto As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nm_solicitante As String,  _
                    ByVal Original_te_solicitante As String,  _
                    ByVal Original_nm_depto_solicitante As String,  _
                    ByVal Original_nm_contato_solicitante As String,  _
                    ByVal Original_ed_email_solicitante As String,  _
                    ByVal Original_te_contato As String,  _
                    ByVal Original_tp_instrucao As Global.System.Nullable(Of Integer),  _
                    ByVal Original_dt_instrucao As Global.System.Nullable(Of Date),  _
                    ByVal Original_ds_amostra_padrao As String,  _
                    ByVal Original_nm_responsavel_amostra As String,  _
                    ByVal Original_nm_supervisor_amostra As String,  _
                    ByVal Original_lg_contra_peca As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ds_contra_peca As String,  _
                    ByVal Original_tx_resumo As String,  _
                    ByVal Original_qt_prod_min As Global.System.Nullable(Of Integer),  _
                    ByVal Original_qt_prod_med As Global.System.Nullable(Of Integer),  _
                    ByVal Original_qt_prod_max As Global.System.Nullable(Of Integer),  _
                    ByVal cd_instrucao As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nr_instrucao,Long)
            If (cd_cliente.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cd_cliente.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (cd_indireto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cd_indireto.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (nm_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nm_solicitante,String)
            End If
            If (te_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(te_solicitante,String)
            End If
            If (nm_depto_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nm_depto_solicitante,String)
            End If
            If (nm_contato_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nm_contato_solicitante,String)
            End If
            If (ed_email_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ed_email_solicitante,String)
            End If
            If (te_contato Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(te_contato,String)
            End If
            If (tp_instrucao.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(tp_instrucao.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (dt_instrucao.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(dt_instrucao.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ds_amostra_padrao Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ds_amostra_padrao,String)
            End If
            If (nm_responsavel_amostra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(nm_responsavel_amostra,String)
            End If
            If (nm_supervisor_amostra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(nm_supervisor_amostra,String)
            End If
            If (lg_contra_peca.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(lg_contra_peca.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (ds_contra_peca Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ds_contra_peca,String)
            End If
            If (tx_resumo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tx_resumo,String)
            End If
            If (tx_instrucao Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(tx_instrucao,String)
            End If
            If (tx_cliente Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(tx_cliente,String)
            End If
            If (qt_prod_min.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(qt_prod_min.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (qt_prod_med.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(qt_prod_med.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (qt_prod_max.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(qt_prod_max.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_cd_instrucao,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_nr_instrucao,Long)
            If (Original_cd_cliente.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_cd_cliente.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_cd_indireto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_cd_indireto.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_nm_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_nm_solicitante,String)
            End If
            If (Original_te_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_te_solicitante,String)
            End If
            If (Original_nm_depto_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_nm_depto_solicitante,String)
            End If
            If (Original_nm_contato_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_nm_contato_solicitante,String)
            End If
            If (Original_ed_email_solicitante Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ed_email_solicitante,String)
            End If
            If (Original_te_contato Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_te_contato,String)
            End If
            If (Original_tp_instrucao.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_tp_instrucao.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_dt_instrucao.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_dt_instrucao.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_ds_amostra_padrao Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_ds_amostra_padrao,String)
            End If
            If (Original_nm_responsavel_amostra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_nm_responsavel_amostra,String)
            End If
            If (Original_nm_supervisor_amostra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_nm_supervisor_amostra,String)
            End If
            If (Original_lg_contra_peca.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_lg_contra_peca.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_ds_contra_peca Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_ds_contra_peca,String)
            End If
            If (Original_tx_resumo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_tx_resumo,String)
            End If
            If (Original_qt_prod_min.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_qt_prod_min.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_qt_prod_med.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_qt_prod_med.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_qt_prod_max.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_qt_prod_max.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(cd_instrucao,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nr_instrucao As Long,  _
                    ByVal cd_cliente As Global.System.Nullable(Of Integer),  _
                    ByVal cd_indireto As Global.System.Nullable(Of Integer),  _
                    ByVal nm_solicitante As String,  _
                    ByVal te_solicitante As String,  _
                    ByVal nm_depto_solicitante As String,  _
                    ByVal nm_contato_solicitante As String,  _
                    ByVal ed_email_solicitante As String,  _
                    ByVal te_contato As String,  _
                    ByVal tp_instrucao As Global.System.Nullable(Of Integer),  _
                    ByVal dt_instrucao As Global.System.Nullable(Of Date),  _
                    ByVal ds_amostra_padrao As String,  _
                    ByVal nm_responsavel_amostra As String,  _
                    ByVal nm_supervisor_amostra As String,  _
                    ByVal lg_contra_peca As Global.System.Nullable(Of Boolean),  _
                    ByVal ds_contra_peca As String,  _
                    ByVal tx_resumo As String,  _
                    ByVal tx_instrucao As String,  _
                    ByVal tx_cliente As String,  _
                    ByVal qt_prod_min As Global.System.Nullable(Of Integer),  _
                    ByVal qt_prod_med As Global.System.Nullable(Of Integer),  _
                    ByVal qt_prod_max As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cd_instrucao As Integer,  _
                    ByVal Original_nr_instrucao As Long,  _
                    ByVal Original_cd_cliente As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cd_indireto As Global.System.Nullable(Of Integer),  _
                    ByVal Original_nm_solicitante As String,  _
                    ByVal Original_te_solicitante As String,  _
                    ByVal Original_nm_depto_solicitante As String,  _
                    ByVal Original_nm_contato_solicitante As String,  _
                    ByVal Original_ed_email_solicitante As String,  _
                    ByVal Original_te_contato As String,  _
                    ByVal Original_tp_instrucao As Global.System.Nullable(Of Integer),  _
                    ByVal Original_dt_instrucao As Global.System.Nullable(Of Date),  _
                    ByVal Original_ds_amostra_padrao As String,  _
                    ByVal Original_nm_responsavel_amostra As String,  _
                    ByVal Original_nm_supervisor_amostra As String,  _
                    ByVal Original_lg_contra_peca As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ds_contra_peca As String,  _
                    ByVal Original_tx_resumo As String,  _
                    ByVal Original_qt_prod_min As Global.System.Nullable(Of Integer),  _
                    ByVal Original_qt_prod_med As Global.System.Nullable(Of Integer),  _
                    ByVal Original_qt_prod_max As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(nr_instrucao, cd_cliente, cd_indireto, nm_solicitante, te_solicitante, nm_depto_solicitante, nm_contato_solicitante, ed_email_solicitante, te_contato, tp_instrucao, dt_instrucao, ds_amostra_padrao, nm_responsavel_amostra, nm_supervisor_amostra, lg_contra_peca, ds_contra_peca, tx_resumo, tx_instrucao, tx_cliente, qt_prod_min, qt_prod_med, qt_prod_max, Original_cd_instrucao, Original_nr_instrucao, Original_cd_cliente, Original_cd_indireto, Original_nm_solicitante, Original_te_solicitante, Original_nm_depto_solicitante, Original_nm_contato_solicitante, Original_ed_email_solicitante, Original_te_contato, Original_tp_instrucao, Original_dt_instrucao, Original_ds_amostra_padrao, Original_nm_responsavel_amostra, Original_nm_supervisor_amostra, Original_lg_contra_peca, Original_ds_contra_peca, Original_tx_resumo, Original_qt_prod_min, Original_qt_prod_med, Original_qt_prod_max, Original_cd_instrucao)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class faturamentoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "faturamento"
            tableMapping.ColumnMappings.Add("cd_faturamento", "cd_faturamento")
            tableMapping.ColumnMappings.Add("cd_cliente", "cd_cliente")
            tableMapping.ColumnMappings.Add("dt_faturamento", "dt_faturamento")
            tableMapping.ColumnMappings.Add("dt_inicial", "dt_inicial")
            tableMapping.ColumnMappings.Add("dt_final", "dt_final")
            tableMapping.ColumnMappings.Add("ds_obs", "ds_obs")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[faturamento] WHERE (([cd_faturamento] = @Original_cd_faturamen"& _ 
                "to) AND ([cd_cliente] = @Original_cd_cliente) AND ([dt_faturamento] = @Original_"& _ 
                "dt_faturamento) AND ([dt_inicial] = @Original_dt_inicial) AND ([dt_final] = @Ori"& _ 
                "ginal_dt_final))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_faturamento", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_faturamento", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_faturamento", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_inicial", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_inicial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_final", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_final", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[faturamento] ([cd_cliente], [dt_faturamento], [dt_inicial], [d"& _ 
                "t_final], [ds_obs]) VALUES (@cd_cliente, @dt_faturamento, @dt_inicial, @dt_final"& _ 
                ", @ds_obs);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cd_faturamento, cd_cliente, dt_faturamento, dt_inicial, dt_f"& _ 
                "inal, ds_obs FROM faturamento WHERE (cd_faturamento = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_faturamento", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_faturamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_inicial", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_inicial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_final", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_final", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ds_obs", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_obs", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[faturamento] SET [cd_cliente] = @cd_cliente, [dt_faturamento] = @dt"& _ 
                "_faturamento, [dt_inicial] = @dt_inicial, [dt_final] = @dt_final, [ds_obs] = @ds"& _ 
                "_obs WHERE (([cd_faturamento] = @Original_cd_faturamento) AND ([cd_cliente] = @O"& _ 
                "riginal_cd_cliente) AND ([dt_faturamento] = @Original_dt_faturamento) AND ([dt_i"& _ 
                "nicial] = @Original_dt_inicial) AND ([dt_final] = @Original_dt_final));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "cd_faturamento, cd_cliente, dt_faturamento, dt_inicial, dt_final, ds_obs FROM fa"& _ 
                "turamento WHERE (cd_faturamento = @cd_faturamento)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_faturamento", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_faturamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_inicial", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_inicial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_final", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_final", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ds_obs", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ds_obs", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_faturamento", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cd_cliente", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_cliente", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_faturamento", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_faturamento", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_inicial", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_inicial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_final", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_final", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_faturamento", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_faturamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.eyeConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cd_faturamento, cd_cliente, dt_faturamento, dt_inicial, dt_final, ds_obs F"& _ 
                "ROM dbo.faturamento"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.faturamentoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.faturamentoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.faturamentoDataTable = New DataSet1.faturamentoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.faturamentoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "faturamento")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cd_faturamento As Integer, ByVal Original_cd_cliente As Integer, ByVal Original_dt_faturamento As Date, ByVal Original_dt_inicial As Date, ByVal Original_dt_final As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cd_faturamento,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cd_cliente,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_dt_faturamento,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_dt_inicial,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_dt_final,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cd_cliente As Integer, ByVal dt_faturamento As Date, ByVal dt_inicial As Date, ByVal dt_final As Date, ByVal ds_obs As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cd_cliente,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(dt_faturamento,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(dt_inicial,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(dt_final,Date)
            If (ds_obs Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ds_obs,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cd_cliente As Integer, ByVal dt_faturamento As Date, ByVal dt_inicial As Date, ByVal dt_final As Date, ByVal ds_obs As String, ByVal Original_cd_faturamento As Integer, ByVal Original_cd_cliente As Integer, ByVal Original_dt_faturamento As Date, ByVal Original_dt_inicial As Date, ByVal Original_dt_final As Date, ByVal cd_faturamento As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cd_cliente,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dt_faturamento,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(dt_inicial,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(dt_final,Date)
            If (ds_obs Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ds_obs,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_cd_faturamento,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_cd_cliente,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_dt_faturamento,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_dt_inicial,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_dt_final,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(cd_faturamento,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cd_cliente As Integer, ByVal dt_faturamento As Date, ByVal dt_inicial As Date, ByVal dt_final As Date, ByVal ds_obs As String, ByVal Original_cd_faturamento As Integer, ByVal Original_cd_cliente As Integer, ByVal Original_dt_faturamento As Date, ByVal Original_dt_inicial As Date, ByVal Original_dt_final As Date) As Integer
            Return Me.Update(cd_cliente, dt_faturamento, dt_inicial, dt_final, ds_obs, Original_cd_faturamento, Original_cd_cliente, Original_dt_faturamento, Original_dt_inicial, Original_dt_final, Original_cd_faturamento)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _faturamento_instrucaoTableAdapter As faturamento_instrucaoTableAdapter
        
        Private _instrucaoTableAdapter As instrucaoTableAdapter
        
        Private _faturamentoTableAdapter As faturamentoTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property faturamento_instrucaoTableAdapter() As faturamento_instrucaoTableAdapter
            Get
                Return Me._faturamento_instrucaoTableAdapter
            End Get
            Set
                Me._faturamento_instrucaoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property instrucaoTableAdapter() As instrucaoTableAdapter
            Get
                Return Me._instrucaoTableAdapter
            End Get
            Set
                Me._instrucaoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property faturamentoTableAdapter() As faturamentoTableAdapter
            Get
                Return Me._faturamentoTableAdapter
            End Get
            Set
                Me._faturamentoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._faturamento_instrucaoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._faturamento_instrucaoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._faturamento_instrucaoTableAdapter.Connection
                End If
                If ((Not (Me._instrucaoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._instrucaoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._instrucaoTableAdapter.Connection
                End If
                If ((Not (Me._faturamentoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._faturamentoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._faturamentoTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._faturamento_instrucaoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._instrucaoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._faturamentoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._faturamentoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.faturamento.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._faturamentoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._instrucaoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.instrucao.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._instrucaoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._faturamento_instrucaoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.faturamento_instrucao.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._faturamento_instrucaoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._faturamentoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.faturamento.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._faturamentoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._instrucaoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.instrucao.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._instrucaoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._faturamento_instrucaoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.faturamento_instrucao.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._faturamento_instrucaoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._faturamento_instrucaoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.faturamento_instrucao.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._faturamento_instrucaoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._instrucaoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.instrucao.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._instrucaoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._faturamentoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.faturamento.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._faturamentoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._faturamento_instrucaoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._faturamento_instrucaoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._instrucaoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._instrucaoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._faturamentoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._faturamentoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._faturamento_instrucaoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._faturamento_instrucaoTableAdapter, Me._faturamento_instrucaoTableAdapter.Connection)
                    Me._faturamento_instrucaoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._faturamento_instrucaoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._faturamento_instrucaoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._faturamento_instrucaoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._faturamento_instrucaoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._instrucaoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._instrucaoTableAdapter, Me._instrucaoTableAdapter.Connection)
                    Me._instrucaoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._instrucaoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._instrucaoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._instrucaoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._instrucaoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._faturamentoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._faturamentoTableAdapter, Me._faturamentoTableAdapter.Connection)
                    Me._faturamentoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._faturamentoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._faturamentoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._faturamentoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._faturamentoTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._faturamento_instrucaoTableAdapter) Is Nothing) Then
                    Me._faturamento_instrucaoTableAdapter.Connection = CType(revertConnections(Me._faturamento_instrucaoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._faturamento_instrucaoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._instrucaoTableAdapter) Is Nothing) Then
                    Me._instrucaoTableAdapter.Connection = CType(revertConnections(Me._instrucaoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._instrucaoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._faturamentoTableAdapter) Is Nothing) Then
                    Me._faturamentoTableAdapter.Connection = CType(revertConnections(Me._faturamentoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._faturamentoTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
